{"version":3,"sources":["../../server/exercises/exercisesDao.js"],"names":["Dao","db","dao","getAll","userId","currentWorkout","query","then","data","catch","error","getWorkoutExercise","_generateExerciseIds","exercises","console","log","map","exercise","id","toString","getOne","postOne","Promise","resolve","reject","newExercise","Object","assign","commonDao","insert","postThreeElements","sets","exerciseId","times","all","parseInt","i","postElement","amount","index","delete","table","none","require","CommonDao","module","exports"],"mappings":"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","file":"exercisesDao.js","sourcesContent":["import { exercisesMapper, exerciseMapper } from './exercisesMapper';\nimport lodash from 'lodash';\nclass Dao {\n    constructor(db, dao) {\n        this.db = db || require('../lib/dbConnection').db;\n        const CommonDao = dao || require('../common/dao');\n        this.commonDao = new CommonDao();\n    }\n\n    getAll = (userId, currentWorkout) => {\n        return this.db\n            .query(\n                `\n      SELECT DISTINCT (elements.exercise_id), elements.id, name, body, index, amount, exercises.updated\n      FROM exercises, elements\n      WHERE elements.exercise_id = exercises.id AND user_id = ${userId} order by elements.id`\n                // need to order by elements.id to have the right sequence in grid\n            )\n            .then(data => {\n                return exercisesMapper(data, currentWorkout);\n            })\n            .catch(error => {\n                return error;\n            });\n    };\n\n    getWorkoutExercise = exercises => {\n        return this.db\n            .query(\n                `\n     SELECT DISTINCT (elements.exercise_id), elements.id, name, body, index, amount, exercises.updated\n      FROM exercises, elements\n      WHERE elements.exercise_id = ANY (VALUES ${this._generateExerciseIds(\n                    exercises\n                )}) AND elements.exercise_id = exercises.id order by elements.id`\n                // need to order by elements.id to have the right sequence in grid\n            )\n            .then(data => exercisesMapper(data))\n            .catch(error => {\n                console.log(error);\n                return error;\n            });\n    };\n\n    _generateExerciseIds = exercises => {\n        return exercises.map(exercise => `(${exercise.id})`).toString();\n    };\n\n    getOne = id => {\n        return this.db\n            .query(\n                `select exercises.id as \"exerciseId\", elements.id, name, body, index, amount from exercises, elements where exercises.id = ${id} AND elements.exercise_id = exercises.id order by index`\n            )\n            .then(data => {\n                return exerciseMapper(data);\n            })\n            .catch(error => {\n                return error;\n            });\n    };\n\n    postOne = (exercise, userId) => {\n        return new Promise((resolve, reject) => {\n            let newExercise = Object.assign({}, exercise);\n            newExercise.userId = userId;\n            const query = 'INSERT INTO exercises(name, body, user_id) VALUES(${name}, ${body}, ${userId}) returning id';\n            return this.commonDao.insert(query, newExercise).then(data => {\n                const { id } = data;\n                this.postThreeElements(id, exercise.sets).then(() => {\n                    this.getOne(id).then(newExercise => resolve(newExercise));\n                });\n            });\n        });\n    };\n\n    postThreeElements = (exerciseId, times = '3') => {\n        const query = 'INSERT INTO elements (index, amount, exercise_id) values (${i}, 0, ${exerciseId}) returning id';\n        return Promise.all(\n            lodash.times(\n                parseInt(times, 10),\n                i => this.commonDao.insert(query, { i, exerciseId })\n            )\n        );\n        // return Promise.all([\n        //   this.commonDao.insert(query, { i: 0, exerciseId }),\n        //   this.commonDao.insert(query, { i: 1, exerciseId }),\n        //   this.commonDao.insert(query, { i: 2, exerciseId })\n        // ]);\n    };\n\n    postElement = (amount, index, exerciseId) => {\n        const data = { amount, index, exerciseId };\n        const query = 'INSERT INTO elements(amount, index, exercise_id) VALUES(${amount}, ${index}, ${exerciseId})';\n        return this.commonDao(query, data);\n    };\n\n    delete = (id, table) => {\n        return this.db.none(`DELETE FROM ${table} where id = ${id}`);\n    };\n}\n\nmodule.exports = Dao;\n"]}