{"version":3,"sources":["../../server/exercises/exercisesDao.js"],"names":["Dao","db","dao","getAll","query","then","data","catch","error","getOne","id","postOne","exercise","userId","Promise","resolve","reject","newExercise","Object","assign","commonDao","insert","postThreeElements","all","i","exerciseId","postElement","amount","index","delete","table","none","require","CommonDao","module","exports"],"mappings":";;AAAA;;;;IACMA,G,GACJ,aAAYC,EAAZ,EAAgBC,GAAhB,EAAqB;AAAA;;AAAA;;AAAA,OAMrBC,MANqB,GAMZ,YAAM;AACb,WAAO,MAAKF,EAAL,CAAQG,KAAR,gMAG2D;AAH3D,MAKJC,IALI,CAKC,gBAAQ;AACZ,aAAO,sCAAgBC,IAAhB,CAAP;AACD,KAPI,EAQJC,KARI,CAQE,iBAAS;AACd,aAAOC,KAAP;AACD,KAVI,CAAP;AAWD,GAlBoB;;AAAA,OAoBrBC,MApBqB,GAoBZ,cAAM;AACb,WAAO,MAAKR,EAAL,CAAQG,KAAR,mGAA8GM,EAA9G,+CACJL,IADI,CACC,gBAAQ;AACZ,aAAO,qCAAeC,IAAf,CAAP;AACD,KAHI,EAIJC,KAJI,CAIE,iBAAS;AACd,aAAOC,KAAP;AACD,KANI,CAAP;AAOD,GA5BoB;;AAAA,OA8BrBG,OA9BqB,GA8BX,UAACC,QAAD,EAAWC,MAAX,EAAsB;AAC9B,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIC,cAAcC,OAAOC,MAAP,CAAc,EAAd,EAAkBP,QAAlB,CAAlB;AACAK,kBAAYJ,MAAZ,GAAqBA,MAArB;AACA,UAAMT,QAAQ,6FAAd;AACA,aAAO,MAAKgB,SAAL,CAAeC,MAAf,CAAsBjB,KAAtB,EAA6Ba,WAA7B,EACJZ,IADI,CACC,gBAAQ;AAAA,YACLK,EADK,GACCJ,IADD,CACLI,EADK;;AAEZ,cAAKY,iBAAL,CAAuBZ,EAAvB,EACGL,IADH,CACQ,YAAM;AACR;AACF,gBAAKI,MAAL,CAAYC,EAAZ,EAAgBL,IAAhB,CAAqB;AAAA,mBAAeU,QAAQE,WAAR,CAAf;AAAA,WAArB;AACD,SAJH;AAKD,OARI,CAAP;AASD,KAbM,CAAP;AAcD,GA7CoB;;AAAA,OA+CrBK,iBA/CqB,GA+CD,sBAAc;AAChC,QAAMlB,QAAQ,gGAAd;AACA,WAAOU,QAAQS,GAAR,CAAY,CACjB,MAAKH,SAAL,CAAeC,MAAf,CAAsBjB,KAAtB,EAA6B,EAAEoB,GAAG,CAAL,EAAQC,sBAAR,EAA7B,CADiB,EAEjB,MAAKL,SAAL,CAAeC,MAAf,CAAsBjB,KAAtB,EAA6B,EAAEoB,GAAG,CAAL,EAAQC,sBAAR,EAA7B,CAFiB,EAGjB,MAAKL,SAAL,CAAeC,MAAf,CAAsBjB,KAAtB,EAA6B,EAAEoB,GAAG,CAAL,EAAQC,sBAAR,EAA7B,CAHiB,CAAZ,CAAP;AAKD,GAtDoB;;AAAA,OAwDrBC,WAxDqB,GAwDP,UAACC,MAAD,EAASC,KAAT,EAAgBH,UAAhB,EAA+B;AAC3C,QAAMnB,OAAO,EAAEqB,cAAF,EAAUC,YAAV,EAAiBH,sBAAjB,EAAb;AACA,QAAMrB,QAAQ,6FAAd;AACA,WAAO,MAAKgB,SAAL,CAAehB,KAAf,EAAsBE,IAAtB,CAAP;AACD,GA5DoB;;AAAA,OA8DrBuB,MA9DqB,GA8DZ,UAACnB,EAAD,EAAKoB,KAAL,EAAe;AACtB,WAAO,MAAK7B,EAAL,CAAQ8B,IAAR,kBAA4BD,KAA5B,oBAAgDpB,EAAhD,CAAP;AACD,GAhEoB;;AACnB,OAAKT,EAAL,GAAUA,MAAM+B,QAAQ,qBAAR,EAA+B/B,EAA/C;AACA,MAAMgC,YAAY/B,OAAO8B,QAAQ,eAAR,CAAzB;AACA,OAAKZ,SAAL,GAAiB,IAAIa,SAAJ,EAAjB;AACD,C;;AAgEHC,OAAOC,OAAP,GAAiBnC,GAAjB","file":"exercisesDao.js","sourcesContent":["import { exercisesMapper, exerciseMapper } from './exercisesMapper';\nclass Dao {\n  constructor(db, dao) {\n    this.db = db || require('../lib/dbConnection').db;\n    const CommonDao = dao || require('../common/dao');\n    this.commonDao = new CommonDao();\n  }\n\n  getAll = () => {\n    return this.db.query(`\n      SELECT DISTINCT (elements.exercise_id), elements.id, name, body, index, amount\n      FROM exercises, elements\n      WHERE elements.exercise_id = exercises.id order by elements.id` // need to order by elements.id to have the right sequence in grid\n    )\n      .then(data => {\n        return exercisesMapper(data);\n      })\n      .catch(error => {\n        return error;\n      });\n  }\n\n  getOne = id => {\n    return this.db.query(`select exercises.id, name, body, index, amount from exercises, elements where exercises.id = ${id} AND elements.exercise_id = exercises.id`)\n      .then(data => {\n        return exerciseMapper(data);\n      })\n      .catch(error => {\n        return error;\n      });\n  }\n\n  postOne = (exercise, userId) => {\n    return new Promise((resolve, reject) => {\n      let newExercise = Object.assign({}, exercise);\n      newExercise.userId = userId;\n      const query = 'INSERT INTO exercises(name, body, user_id) VALUES(${name}, ${body}, ${userId}) returning id';\n      return this.commonDao.insert(query, newExercise)\n        .then(data => {\n          const {id} = data;\n          this.postThreeElements(id)\n            .then(() => {\n                debugger;\n              this.getOne(id).then(newExercise => resolve(newExercise));\n            });\n        });\n    });\n  }\n\n  postThreeElements = exerciseId => {\n    const query = 'INSERT INTO elements (index, amount, exercise_id) values (${i}, 0, ${exerciseId}) returning id';\n    return Promise.all([\n      this.commonDao.insert(query, { i: 0, exerciseId }),\n      this.commonDao.insert(query, { i: 1, exerciseId }),\n      this.commonDao.insert(query, { i: 2, exerciseId })\n    ]);\n  }\n\n  postElement = (amount, index, exerciseId) => {\n    const data = { amount, index, exerciseId };\n    const query = 'INSERT INTO elements(amount, index, exercise_id) VALUES(${amount}, ${index}, ${exerciseId})';\n    return this.commonDao(query, data);\n  }\n\n  delete = (id, table) => {\n    return this.db.none(`DELETE FROM ${table} where id = ${id}`);\n  }\n\n}\n\nmodule.exports = Dao;\n\n"]}