{"version":3,"sources":["../../server/exercises/exercisesDao.js"],"names":["Dao","db","dao","getAll","query","userId","then","data","catch","error","getOne","id","postOne","exercise","Promise","resolve","reject","newExercise","Object","assign","commonDao","insert","postThreeElements","all","i","exerciseId","postElement","amount","index","delete","table","none","require","CommonDao","module","exports"],"mappings":";;AAAA;;;;IACMA,G,GACJ,aAAYC,EAAZ,EAAgBC,GAAhB,EAAqB;AAAA;;AAAA;;AAAA,OAMrBC,MANqB,GAMZ,kBAAU;AACjB,WAAO,MAAKF,EAAL,CACJG,KADI,+MAKqDC,MALrD;AAMH;AANG,MAQJC,IARI,CAQC;AAAA,aAAQ,sCAAgBC,IAAhB,CAAR;AAAA,KARD,EASJC,KATI,CASE,iBAAS;AACd,aAAOC,KAAP;AACD,KAXI,CAAP;AAYD,GAnBoB;;AAAA,OAqBrBC,MArBqB,GAqBZ,cAAM;AACb,WAAO,MAAKT,EAAL,CACJG,KADI,kIAE0HO,EAF1H,8DAIJL,IAJI,CAIC,gBAAQ;AACZ,aAAO,qCAAeC,IAAf,CAAP;AACD,KANI,EAOJC,KAPI,CAOE,iBAAS;AACd,aAAOC,KAAP;AACD,KATI,CAAP;AAUD,GAhCoB;;AAAA,OAkCrBG,OAlCqB,GAkCX,UAACC,QAAD,EAAWR,MAAX,EAAsB;AAC9B,WAAO,IAAIS,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIC,cAAcC,OAAOC,MAAP,CAAc,EAAd,EAAkBN,QAAlB,CAAlB;AACAI,kBAAYZ,MAAZ,GAAqBA,MAArB;AACA,UAAMD,QAAQ,6FAAd;AACA,aAAO,MAAKgB,SAAL,CAAeC,MAAf,CAAsBjB,KAAtB,EAA6Ba,WAA7B,EAA0CX,IAA1C,CAA+C,gBAAQ;AAAA,YACpDK,EADoD,GAC7CJ,IAD6C,CACpDI,EADoD;;AAE5D,cAAKW,iBAAL,CAAuBX,EAAvB,EAA2BL,IAA3B,CAAgC,YAAM;AACpC,gBAAKI,MAAL,CAAYC,EAAZ,EAAgBL,IAAhB,CAAqB;AAAA,mBAAeS,QAAQE,WAAR,CAAf;AAAA,WAArB;AACD,SAFD;AAGD,OALM,CAAP;AAMD,KAVM,CAAP;AAWD,GA9CoB;;AAAA,OAgDrBK,iBAhDqB,GAgDD,sBAAc;AAChC,QAAMlB,QAAQ,gGAAd;AACA,WAAOU,QAAQS,GAAR,CAAY,CACjB,MAAKH,SAAL,CAAeC,MAAf,CAAsBjB,KAAtB,EAA6B,EAAEoB,GAAG,CAAL,EAAQC,sBAAR,EAA7B,CADiB,EAEjB,MAAKL,SAAL,CAAeC,MAAf,CAAsBjB,KAAtB,EAA6B,EAAEoB,GAAG,CAAL,EAAQC,sBAAR,EAA7B,CAFiB,EAGjB,MAAKL,SAAL,CAAeC,MAAf,CAAsBjB,KAAtB,EAA6B,EAAEoB,GAAG,CAAL,EAAQC,sBAAR,EAA7B,CAHiB,CAAZ,CAAP;AAKD,GAvDoB;;AAAA,OAyDrBC,WAzDqB,GAyDP,UAACC,MAAD,EAASC,KAAT,EAAgBH,UAAhB,EAA+B;AAC3C,QAAMlB,OAAO,EAAEoB,cAAF,EAAUC,YAAV,EAAiBH,sBAAjB,EAAb;AACA,QAAMrB,QAAQ,6FAAd;AACA,WAAO,MAAKgB,SAAL,CAAehB,KAAf,EAAsBG,IAAtB,CAAP;AACD,GA7DoB;;AAAA,OA+DrBsB,MA/DqB,GA+DZ,UAAClB,EAAD,EAAKmB,KAAL,EAAe;AACtB,WAAO,MAAK7B,EAAL,CAAQ8B,IAAR,kBAA4BD,KAA5B,oBAAgDnB,EAAhD,CAAP;AACD,GAjEoB;;AACnB,OAAKV,EAAL,GAAUA,MAAM+B,QAAQ,qBAAR,EAA+B/B,EAA/C;AACA,MAAMgC,YAAY/B,OAAO8B,QAAQ,eAAR,CAAzB;AACA,OAAKZ,SAAL,GAAiB,IAAIa,SAAJ,EAAjB;AACD,C;;AAgEHC,OAAOC,OAAP,GAAiBnC,GAAjB","file":"exercisesDao.js","sourcesContent":["import { exercisesMapper, exerciseMapper } from \"./exercisesMapper\";\nclass Dao {\n  constructor(db, dao) {\n    this.db = db || require(\"../lib/dbConnection\").db;\n    const CommonDao = dao || require(\"../common/dao\");\n    this.commonDao = new CommonDao();\n  }\n\n  getAll = userId => {\n    return this.db\n      .query(\n        `\n      SELECT DISTINCT (elements.exercise_id), elements.id, name, body, index, amount, exercises.updated\n      FROM exercises, elements\n      WHERE elements.exercise_id = exercises.id AND user_id = ${userId} order by elements.id`\n        // need to order by elements.id to have the right sequence in grid\n      )\n      .then(data => exercisesMapper(data))\n      .catch(error => {\n        return error;\n      });\n  };\n\n  getOne = id => {\n    return this.db\n      .query(\n        `select exercises.id as \"exerciseId\", elements.id, name, body, index, amount from exercises, elements where exercises.id = ${id} AND elements.exercise_id = exercises.id order by index`\n      )\n      .then(data => {\n        return exerciseMapper(data);\n      })\n      .catch(error => {\n        return error;\n      });\n  };\n\n  postOne = (exercise, userId) => {\n    return new Promise((resolve, reject) => {\n      let newExercise = Object.assign({}, exercise);\n      newExercise.userId = userId;\n      const query = \"INSERT INTO exercises(name, body, user_id) VALUES(${name}, ${body}, ${userId}) returning id\";\n      return this.commonDao.insert(query, newExercise).then(data => {\n        const { id } = data;\n        this.postThreeElements(id).then(() => {\n          this.getOne(id).then(newExercise => resolve(newExercise));\n        });\n      });\n    });\n  };\n\n  postThreeElements = exerciseId => {\n    const query = \"INSERT INTO elements (index, amount, exercise_id) values (${i}, 0, ${exerciseId}) returning id\";\n    return Promise.all([\n      this.commonDao.insert(query, { i: 0, exerciseId }),\n      this.commonDao.insert(query, { i: 1, exerciseId }),\n      this.commonDao.insert(query, { i: 2, exerciseId })\n    ]);\n  };\n\n  postElement = (amount, index, exerciseId) => {\n    const data = { amount, index, exerciseId };\n    const query = \"INSERT INTO elements(amount, index, exercise_id) VALUES(${amount}, ${index}, ${exerciseId})\";\n    return this.commonDao(query, data);\n  };\n\n  delete = (id, table) => {\n    return this.db.none(`DELETE FROM ${table} where id = ${id}`);\n  };\n}\n\nmodule.exports = Dao;\n"]}