{"version":3,"sources":["../../server/exercises/exercisesRouter.js"],"names":["router","Router","service","findOne","req","res","next","getOne","params","id","then","json","data","postOne","errors","validate","send","body","exercise","userId","newExercise","catch","sendStatus","updateExercise","table","update","deleteExercise","delete","console","log","error","getAll","get","post","put","param","validationErrors","what","JSON","stringify","module","exports"],"mappings":"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","file":"exercisesRouter.js","sourcesContent":["import express from \"express\";\nconst router = express.Router();\nimport Service from \"./exercisesService\";\nimport { isEmpty } from \"lodash\";\nconst service = new Service();\n\nconst findOne = (req, res, next) => {\n  service.getOne(req.params.id).then(data => {\n    res.json({ data });\n  });\n};\n\nconst postOne = (req, res, next) => {\n  const errors = validate(\"exercise\", req);\n  if (!isEmpty(errors)) {\n    res.send(400, errors);\n  }\n\n  service\n    .postOne(req.body.exercise, req.params.userId)\n    .then(newExercise => {\n      res.json(newExercise);\n    })\n    .catch(() => {\n      res.sendStatus(400);\n    });\n};\n\nconst updateExercise = (req, res, next) => {\n  const errors = validate(\"exercise\", req);\n  if (!isEmpty(errors)) {\n    res.send(400, errors);\n  }\n\n  const table = \"exercises\";\n  service\n    .update(req.params.id, req.body.exercise, table)\n    .then(data => {\n      res.json(data);\n    })\n    .catch(() => {\n      res.sendStatus(400);\n    });\n};\n\nconst deleteExercise = (req, res, next) => {\n  const table = \"exercises\";\n  service\n    .delete(req.params.id, table)\n    .then(() => {\n      res.sendStatus(201);\n    })\n    .catch(error => {\n      console.log(\"error\", error);\n\n      res.sendStatus(400);\n    });\n};\n\nconst getAll = (req, res, next) => {\n  console.log('kommer du hit?');\n  \n  const { userId } = req.params;\n  service\n    .getAll(userId)\n    .then(data => {\n      res.json({ data });\n    })\n    .catch(error => {\n      res.sendStatus(400);\n    });\n};\n\n// router.put('/:id/:index', updateExercise);\nrouter.delete(\"/:id\", deleteExercise);\nrouter.get(\"/:userId\", getAll);\n// router.get(\"/one/:id\", findOne);\nrouter.post(\"/:userId\", postOne);\nrouter.put(\"/:id\", updateExercise);\n\nconst validate = (param, req) => {\n  const errors = req.validationErrors();\n\n  if (errors) {\n    console.log({ what: param, error: JSON.stringify(errors) });\n    return { ...errors };\n  } else {\n    return {};\n  }\n};\n\nmodule.exports = router;\n"]}