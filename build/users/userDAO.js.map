{"version":3,"sources":["../../server/users/userDAO.js"],"names":["Dao","db","dao","getUserWithEmail","any","email","then","data","catch","error","console","log","getUserById","one","userId","err","createUser","user","name","url","id","message","require","CommonDao","commonDao","module","exports"],"mappings":";;;;IAAMA,G,GACJ,aAAYC,EAAZ,EAAgBC,GAAhB,EAAqB;AAAA;;AAAA;;AAAA,OAMrBC,gBANqB,GAMF,iBAAS;AAC1B,WAAO,MAAKF,EAAL,CACJG,GADI,CACA,yDADA,EAC2D,CAACC,KAAD,CAD3D,EAEJC,IAFI,CAEC,UAASC,IAAT,EAAe;AACnB,aAAOA,KAAK,CAAL,CAAP,CADmB,CACH;AACjB,KAJI,EAKJC,KALI,CAKE,UAASC,KAAT,EAAgB;AACrBC,cAAQC,GAAR,CAAY,eAAZ,EAA6BF,KAA7B;AACA,aAAO,KAAP;AACD,KARI,CAAP;AASD,GAhBoB;;AAAA,OAkBrBG,WAlBqB,GAkBP,kBAAU;AACtB,WAAO,MAAKX,EAAL,CACJY,GADI,CAEH,2HAFG,EAGH,CAACC,MAAD,CAHG,EAKJN,KALI,CAKE;AAAA,aAAOE,QAAQC,GAAR,CAAY,KAAZ,EAAmBI,GAAnB,CAAP;AAAA,KALF,CAAP;AAMD,GAzBoB;;AAAA,OA2BrBC,UA3BqB,GA2BR,gBAAQ;AACnB,WAAO,MAAKf,EAAL,CACJY,GADI,CAEH,uEAFG,EAGH,CAACI,KAAKC,IAAN,EAAYD,KAAKE,GAAjB,EAAsBF,KAAKZ,KAA3B,CAHG,EAKJC,IALI,CAKC,gBAAiB;AAAA,UAANc,EAAM,QAANA,EAAM;;AACrB,aAAOA,EAAP;AACD,KAPI,EAQJZ,KARI,CAQE,UAASC,KAAT,EAAgB;AACrBC,cAAQC,GAAR,CAAY,QAAZ,EAAsBF,MAAMY,OAAN,IAAiBZ,KAAvC,EADqB,CAC0B;AAChD,KAVI,CAAP;AAWD,GAvCoB;;AACnB,OAAKR,EAAL,GAAUA,MAAMqB,QAAQ,qBAAR,EAA+BrB,EAA/C;AACA,MAAMsB,YAAYrB,OAAOoB,QAAQ,eAAR,CAAzB;AACA,OAAKE,SAAL,GAAiB,IAAID,SAAJ,EAAjB;AACD,C;;AAsCHE,OAAOC,OAAP,GAAiB1B,GAAjB","file":"userDAO.js","sourcesContent":["class Dao {\n  constructor(db, dao) {\n    this.db = db || require(\"../lib/dbConnection\").db;\n    const CommonDao = dao || require(\"../common/dao\");\n    this.commonDao = new CommonDao();\n  }\n\n  getUserWithEmail = email => {\n    return this.db\n      .any(\"select id, name, image, email from users where email=$1\", [email])\n      .then(function(data) {\n        return data[0]; //assume there is only one\n      })\n      .catch(function(error) {\n        console.log(\"no user found\", error);\n        return false;\n      });\n  };\n\n  getUserById = userId => {\n    return this.db\n      .one(\n        \"select usr.id, name, image, email, s.highscore from users usr left join highscore s on (s.user_id = $1) where usr.id = $1\",\n        [userId]\n      )\n      .catch(err => console.log(\"err\", err));\n  };\n\n  createUser = user => {\n    return this.db\n      .one(\n        \"insert into users(name, image, email) values($1, $2, $3) returning id\",\n        [user.name, user.url, user.email]\n      )\n      .then(function({ id }) {\n        return id;\n      })\n      .catch(function(error) {\n        console.log(\"ERROR:\", error.message || error); // print error;\n      });\n  };\n}\n\nmodule.exports = Dao;\n"]}