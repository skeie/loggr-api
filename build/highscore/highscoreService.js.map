{"version":3,"sources":["../../server/highscore/highscoreService.js"],"names":["Service","dao","commonDao","update","userId","amount","getOne","id","get","getAll","create","isOldUser","highscore","exerciseDao","then","allExercise","reduce","prevItem","exercise","sets","set","Boolean","parseInt","replace","HighscoreDao","require","CommonDao","ExerciseDao","module","exports"],"mappings":";;;;IAAMA,O,GACJ,iBAAYC,GAAZ,EAAiBC,SAAjB,EAA4B;AAAA;;AAAA;;AAAA,OAS5BC,MAT4B,GASnB,UAACC,MAAD,EAASC,MAAT,EAAoB;AAC3B,WAAO,MAAKJ,GAAL,CAASK,MAAT,CAAgBC,EAAhB,CAAP;AACD,GAX2B;;AAAA,OAa5BC,GAb4B,GAatB,kBAAU;AACd,WAAO,MAAKP,GAAL,CAASQ,MAAT,CAAgBL,MAAhB,CAAP;AACD,GAf2B;;AAAA,OAiB5BM,MAjB4B,GAiBnB,UAACN,MAAD,EAASO,SAAT,EAAuB;AAC9B;AACA,QAAIC,YAAY,CAAhB;AACA,QAAID,SAAJ,EAAe;AACb,aAAO,MAAKE,WAAL,CAAiBJ,MAAjB,CAAwBL,MAAxB,EAAgCU,IAAhC,CAAqC,uBAAe;AACzDF,oBAAYG,YAAYC,MAAZ,CACV,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtB,iBAAOD,WACLC,SAASC,IAAT,CAAcH,MAAd,CACE,UAACC,QAAD,EAAWG,GAAX,EAAmB;AACjB,gBAAIC,QAAQD,IAAIf,MAAZ,CAAJ,EAAyB;AACvB,qBAAOY,WAAWK,SAASF,IAAIf,MAAJ,CAAWkB,OAAX,CAAmB,MAAnB,EAA2B,EAA3B,CAAT,CAAlB;AACD,aAFD,MAEO;AACL,qBAAON,QAAP;AACD;AACF,WAPH,EAQE,CARF,CADF;AAWD,SAbS,EAcV,CAdU,CAAZ;AAgBA,eAAO,MAAKhB,GAAL,CAASS,MAAT,CAAgBN,MAAhB,EAAwBQ,SAAxB,CAAP;AACD,OAlBM,CAAP;AAmBD,KApBD,MAoBO;AACL,aAAO,MAAKX,GAAL,CAASS,MAAT,CAAgBN,MAAhB,EAAwBQ,SAAxB,CAAP;AACD;AACF,GA3C2B;;AAC1B,MAAMY,eAAevB,OAAOwB,QAAQ,gBAAR,CAA5B;AACA,MAAMC,YAAYxB,aAAauB,QAAQ,eAAR,CAA/B;AACA,MAAME,cAAcF,QAAQ,2BAAR,CAApB;AACA,OAAKZ,WAAL,GAAmB,IAAIc,WAAJ,EAAnB;AACA,OAAK1B,GAAL,GAAW,IAAIuB,YAAJ,EAAX;AACA,OAAKtB,SAAL,GAAiB,IAAIwB,SAAJ,EAAjB;AACD,C;;AAuCHE,OAAOC,OAAP,GAAiB7B,OAAjB","file":"highscoreService.js","sourcesContent":["class Service {\n  constructor(dao, commonDao) {\n    const HighscoreDao = dao || require(\"./highscoreDao\");\n    const CommonDao = commonDao || require(\"../common/dao\");\n    const ExerciseDao = require(\"../exercises/exercisesDao\");\n    this.exerciseDao = new ExerciseDao();\n    this.dao = new HighscoreDao();\n    this.commonDao = new CommonDao();\n  }\n\n  update = (userId, amount) => {\n    return this.dao.getOne(id);\n  };\n\n  get = userId => {\n    return this.dao.getAll(userId);\n  };\n\n  create = (userId, isOldUser) => {\n    // generate highscore based on exercises\n    let highscore = 0;\n    if (isOldUser) {\n      return this.exerciseDao.getAll(userId).then(allExercise => {\n        highscore = allExercise.reduce(\n          (prevItem, exercise) => {\n            return prevItem +\n              exercise.sets.reduce(\n                (prevItem, set) => {\n                  if (Boolean(set.amount)) {\n                    return prevItem + parseInt(set.amount.replace(/\\D+/g, \"\"));\n                  } else {\n                    return prevItem;\n                  }\n                },\n                0\n              );\n          },\n          0\n        );\n        return this.dao.create(userId, highscore);\n      });\n    } else {\n      return this.dao.create(userId, highscore);\n    }\n  };\n}\n\nmodule.exports = Service;\n"]}