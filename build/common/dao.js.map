{"version":3,"sources":["../../server/common/dao.js"],"names":["Dao","db","update","id","object","table","args","keys","Object","length","Promise","resolve","query","count","forEach","key","push","console","log","insert","data","reject","one","then","catch","error","require","module","exports"],"mappings":";;AAAA;;;;IAEMA,G,GACJ,aAAYC,EAAZ,EAAgB;AAAA;;AAAA;;AAAA,OAIhBC,MAJgB,GAIP,UAACC,EAAD,EAAKC,MAAL,EAAaC,KAAb,EAAuB;;AAE9B,QAAIC,OAAO,EAAX;AACA,QAAIC,OAAOC,OAAOD,IAAP,CAAYH,MAAZ,CAAX;;AAEA,QAAI,CAACG,KAAKE,MAAV,EAAkB;AAChB,aAAOC,QAAQC,OAAR,CAAgBP,MAAhB,CAAP;AACD;AACD,QAAIQ,oBAAkBP,KAAlB,UAAJ;AACA,QAAIQ,QAAQ,CAAZ;;AAEAN,SAAKO,OAAL,CAAa,eAAO;AAClBF,eAAY,uBAAUG,GAAV,CAAZ,UAA+BF,KAA/B;AACAP,WAAKU,IAAL,CAAUZ,OAAOW,GAAP,CAAV;AACAF;AACD,KAJD;;AAMAP,SAAKU,IAAL,CAAUb,EAAV;;AAEAS,0CAAoCC,KAApC;AACAI,YAAQC,GAAR,CAAY,SAAZ,EAAuBN,KAAvB,EAA8BN,IAA9B;;AAEA,WAAO,MAAKa,MAAL,CAAYP,KAAZ,EAAmBN,IAAnB,CAAP;AACD,GA3Be;;AAAA,OA6BhBa,MA7BgB,GA6BP,UAACP,KAAD,EAAQQ,IAAR,EAAiB;AACxB,WAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACtC,YAAKpB,EAAL,CAAQqB,GAAR,CAAYV,KAAZ,EAAmBQ,IAAnB,EACWG,IADX,CACgB,gBAAQ;AACZZ,gBAAQS,IAAR;AACD,OAHX,EAIWI,KAJX,CAIiB,iBAAS;AACdP,gBAAQC,GAAR,CAAY,OAAZ,EAAqBO,KAArB;AACAJ,eAAOI,KAAP;AACD,OAPX;AAQD,KATM,CAAP;AAUD,GAxCe;;AACd,OAAKxB,EAAL,GAAUA,MAAMyB,QAAQ,qBAAR,EAA+BzB,EAA/C;AACD,C;;AA0CH0B,OAAOC,OAAP,GAAiB5B,GAAjB","file":"dao.js","sourcesContent":["import {snakeCase} from 'lodash';\n\nclass Dao {\n  constructor(db) {\n    this.db = db || require('../lib/dbConnection').db;\n  }\n\n  update = (id, object, table) => {\n    \n    let args = [];\n    let keys = Object.keys(object);\n\n    if (!keys.length) {\n      return Promise.resolve(object);\n    }\n    let query = `UPDATE ${table} SET `;\n    let count = 1;\n\n    keys.forEach(key => {\n      query += `${snakeCase(key)}=$${count}, `;\n      args.push(object[key]);\n      count++;\n    });\n\n    args.push(id);\n\n    query += `updated=now() WHERE id=$${count} returning id;`;\n    console.log('query: ', query, args);\n    \n    return this.insert(query, args);\n  }\n\n  insert = (query, data) => {\n    return new Promise((resolve, reject) => {\n      this.db.one(query, data)\n                .then(data => {\n                  resolve(data);\n                })\n                .catch(error => {\n                  console.log('error', error);\n                  reject(error);\n                });\n    });\n  }\n\n}\n\nmodule.exports = Dao;\n\n"]}