{"version":3,"sources":["../../server/workouts/workoutRouter.js"],"names":["router","Router","requireToken","service","createWorkout","req","res","next","errors","validate","send","params","exerciseId","user","id","then","sendStatus","catch","console","log","error","getCurrentWorkout","json","workout","updateCurrentWorkout","deleteExerciseInWorkout","post","get","put","delete","param","validationErrors","what","JSON","stringify","module","exports"],"mappings":"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","file":"workoutRouter.js","sourcesContent":["import express from \"express\";\nconst router = express.Router();\nimport Service from \"./workoutService\";\nimport { requireAuth } from \"../util/jwtToken\";\nconst requireToken = requireAuth();\nconst service = new Service();\nimport isEmpty from \"lodash/isEmpty\";\nimport { convertExerciseIdToInt } from '../util/util';\n\nconst createWorkout = (req, res, next) => {\n  const errors = validate(\"exerciseid\", req);\n  if (!isEmpty(errors)) {\n    res.send(400, errors);\n  }\n  service\n    .createWorkout(req.params.exerciseId, req.user.id)\n    .then(user => {\n      res.sendStatus(201);\n    })\n    .catch(error => {\n      console.log(\"error\", error);\n      res.sendStatus(400);\n    });\n};\n\nconst getCurrentWorkout = (req, res, next) => {\n  const errors = validate(\"user\", req);\n  if (!isEmpty(errors)) {\n    res.send(400, errors);\n  }\n  service\n    .getCurrentWorkout(req.user.id)\n    .then(workout => {\n      res.json(workout || {});\n    })\n    .catch(error => {\n      console.log(\"error\", error);\n      res.sendStatus(400);\n    });\n};\n\nconst updateCurrentWorkout = (req, res, next) => {\n  const errors = validate(\"exerciseId\", req);\n  if (!isEmpty(errors)) {\n    res.send(400, errors);\n  }\n\n  service\n    .updateCurrentWorkout(req.params.exerciseId, req.user.id)\n    .then(user => {\n      res.json(user);\n    })\n    .catch(error => {\n      console.log(\"error\", error);\n\n      res.sendStatus(400);\n    });\n};\n\nconst deleteExerciseInWorkout = (req, res, next) => {\n  const errors = validate(\"exerciseId\", req);\n  if (!isEmpty(errors)) {\n    res.send(400, errors);\n  }\n\n  service\n    .deleteExerciseInWorkout(req.params.exerciseId)\n    .then(() => {\n      res.sendStatus(204);\n    })\n    .catch(error => {\n      console.log(\"error\", error);\n\n      res.sendStatus(400);\n    });\n};\n\nrouter.post(\n  \"/:exerciseId\",\n  requireToken,\n  convertExerciseIdToInt,\n  createWorkout\n);\nrouter.get(\"/\", requireToken, getCurrentWorkout);\nrouter.put(\n  \"/:exerciseId\",\n  requireToken,\n  convertExerciseIdToInt,\n  updateCurrentWorkout\n);\nrouter.delete(\n  \"/:exerciseId\",\n  requireToken,\n  convertExerciseIdToInt,\n  deleteExerciseInWorkout\n);\n\nconst validate = (param, req) => {\n  const errors = req.validationErrors();\n\n  if (errors) {\n    console.log({ what: param, error: JSON.stringify(errors) });\n    return { ...errors };\n  } else {\n    return {};\n  }\n};\n\nmodule.exports = router;\n"]}