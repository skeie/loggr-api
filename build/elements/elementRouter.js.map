{"version":3,"sources":["../../server/elements/elementRouter.js"],"names":["router","Router","service","postElement","req","res","next","errors","validate","send","body","element","params","exerciseId","then","sendStatus","catch","updateElement","table","update","id","put","post","param","validationErrors","console","log","what","error","JSON","stringify","module","exports"],"mappings":";;;;AAAA;;;;AAEA;;;;AAEA;;;;AAHA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEA,IAAMC,UAAU,8BAAhB;;;AAGA,IAAMC,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,MAAMC,SAASC,SAAS,SAAT,EAAoBJ,GAApB,CAAf;AACA,MAAI,CAAC,qBAAQG,MAAR,CAAL,EAAsB;AACpBF,QAAII,IAAJ,CAAS,GAAT,EAAcF,MAAd;AACD;;AAEDL,UAAQC,WAAR,CAAoBC,IAAIM,IAAJ,CAASC,OAA7B,EAAsCP,IAAIQ,MAAJ,CAAWC,UAAjD,EACOC,IADP,CACY,YAAM;AACVT,QAAIU,UAAJ,CAAe,GAAf;AACD,GAHP,EAGSC,KAHT,CAGe,YAAM;AACbX,QAAIU,UAAJ,CAAe,GAAf;AACD,GALP;AAMD,CAZD;;AAcA,IAAME,gBAAgB,SAAhBA,aAAgB,CAACb,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxC,MAAMC,SAASC,SAAS,SAAT,EAAoBJ,GAApB,CAAf;AACA,MAAI,CAAC,qBAAQG,MAAR,CAAL,EAAsB;AACpBF,QAAII,IAAJ,CAAS,GAAT,EAAcF,MAAd;AACD;;AAED,MAAMW,QAAQ,UAAd;AACAhB,UAAQiB,MAAR,CAAef,IAAIQ,MAAJ,CAAWQ,EAA1B,EAA8BhB,IAAIM,IAAJ,CAASC,OAAvC,EAAgDO,KAAhD,EACOJ,IADP,CACY,YAAM;AACVT,QAAIU,UAAJ,CAAe,GAAf;AACD,GAHP,EAGSC,KAHT,CAGe,YAAM;AACbX,QAAIU,UAAJ,CAAe,GAAf;AACD,GALP;AAMD,CAbD;;AAeAf,OAAOqB,GAAP,CAAW,kBAAX,EAA+BJ,aAA/B;AACAjB,OAAOsB,IAAP,CAAY,sBAAZ,EAAoCnB,WAApC;;AAEA,SAASK,QAAT,CAAkBe,KAAlB,EAAyBnB,GAAzB,EAA8B;AAC5B,MAAMG,SAASH,IAAIoB,gBAAJ,EAAf;;AAEA,MAAIjB,MAAJ,EAAY;AACVkB,YAAQC,GAAR,CAAY,EAACC,MAAMJ,KAAP,EAAcK,OAAOC,KAAKC,SAAL,CAAevB,MAAf,CAArB,EAAZ;AACA,wBAAWA,MAAX;AACD,GAHD,MAGO;AACL,WAAO,EAAP;AACD;AACF;;AAEDwB,OAAOC,OAAP,GAAiBhC,MAAjB","file":"elementRouter.js","sourcesContent":["import express from 'express';\nconst router = express.Router();\nimport Service from './elementService';\nconst service = new Service();\nimport {isEmpty} from 'lodash';\n\nconst postElement = (req, res, next) => {\n  const errors = validate('element', req);\n  if (!isEmpty(errors)) {\n    res.send(400, errors);\n  }\n\n  service.postElement(req.body.element, req.params.exerciseId)\n        .then(() => {\n          res.sendStatus(201);\n        }).catch(() => {\n          res.sendStatus(400);\n        });\n};\n\nconst updateElement = (req, res, next) => {\n  const errors = validate('element', req);\n  if (!isEmpty(errors)) {\n    res.send(400, errors);\n  }\n\n  const table = 'elements';\n  service.update(req.params.id, req.body.element, table)\n        .then(() => {\n          res.sendStatus(201);\n        }).catch(() => {\n          res.sendStatus(400);\n        });\n};\n\nrouter.put('/:exerciseId/:id', updateElement);\nrouter.post('/:exerciseId/element', postElement);\n\nfunction validate(param, req) {\n  const errors = req.validationErrors();\n\n  if (errors) {\n    console.log({what: param, error: JSON.stringify(errors)});\n    return {...errors};\n  } else {\n    return {};\n  }\n}\n\nmodule.exports = router;\n"]}