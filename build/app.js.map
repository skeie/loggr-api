{"version":3,"sources":["../server/app.js"],"names":["favIconPath","favPath","process","env","NODE_ENV","resolve","__dirname","app","set","PORT","pingPostgres","use","json","urlencoded","extended","static","join","get","req","res","next","hello","listen","console","log","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAMA,cAAc,qBAApB;AACA,IAAMC,UAAUC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,GACb,eAAKC,OAAL,CAAa,GAAb,IAAoB,UAApB,GAAiCL,WADpB,GACoCM,YAAYN,WADhE;AAEA,IAAIO,MAAM,wBAAV;;AAEAA,IAAIC,GAAJ,CAAQ,MAAR,EAAiBN,QAAQC,GAAR,CAAYM,IAAZ,IAAoB,IAArC;AACA;AACA,uBAAaC,YAAb;AACA;AACAH,IAAII,GAAJ,CAAQ,4BAAQV,OAAR,CAAR;AACAM,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAJ,IAAII,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACAL,IAAII,GAAJ,CAAQ,gCAAiB,EAAjB,CAAR;AACAJ,IAAII,GAAJ,CAAQ,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAP,IAAII,GAAJ,CAAQ,+BAAR;AACAJ,IAAII,GAAJ,CAAQ,6BAAR;AACAJ,IAAII,GAAJ,CAAQ,kBAAQI,MAAR,CAAe,eAAKC,IAAL,CAAUV,SAAV,EAAqB,QAArB,CAAf,CAAR;;AAEAC,IAAII,GAAJ,CAAQ,YAAR;AACAJ,IAAII,GAAJ,CAAQ,WAAR;AACAJ,IAAII,GAAJ,CAAQ,QAAR;AACAJ,IAAIU,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/BD,MAAIP,IAAJ,CAAS,EAAES,OAAO,OAAT,EAAT;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAd,IAAIe,MAAJ,CAAWf,IAAIU,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAChCM,UAAQC,GAAR,CAAY,6BAAZ,EAA2CjB,IAAIU,GAAJ,CAAQ,MAAR,CAA3C;AACD,CAFD;;AAKAQ,OAAOC,OAAP,GAAiBnB,GAAjB","file":"app.js","sourcesContent":["import express from 'express';\nimport dbConnection from './lib/dbConnection';\nimport path from 'path';\nimport favicon from 'serve-favicon';\nimport logger from 'morgan';\nimport cookieParser from 'cookie-parser';\nimport bodyParser from 'body-parser';\nimport exercises from './exercises/exercisesRouter';\nimport methodOverride from 'method-override';\nimport expressValidator from 'express-validator';\nimport element from './elements/elementRouter';\nimport users from './users/userRouter';\nconst favIconPath = '/public/favicon.ico';\nconst favPath = process.env.NODE_ENV === 'prod' ?\n  (path.resolve('.') + '/server/' + favIconPath) : (__dirname + favIconPath);\nvar app = express();\n\napp.set('port', (process.env.PORT || 3000));\n// connect to postgres\ndbConnection.pingPostgres();\n// debug url\napp.use(favicon(favPath));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(expressValidator([]));\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(methodOverride());\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/exercises', exercises);\napp.use('/elements', element);\napp.use('/users', users);\napp.get('*', (req, res, next) => {\n  res.json({ hello: 'world' });\n});\n// catch 404 and forward to error handler\n// app.use((req, res, next) => {\n//   var err = new Error('Not Found');\n//   err.status = 404;\n//   next(err);\n// });\n\n// error handlers\n\n// development error handler\n// will print stacktrace\n// if (app.get('env') === 'development') {\n//   app.use((err, req, res, next) => {\n//     res.status(err.status || 500);\n//     res.json('error', {\n//       message: err.message,\n//       error: err\n//     });\n//   });\n// }\n\n// production error handler\n// no stacktraces leaked to user\n// app.use((err, req, res, next) => {\n//   res.status(err.status || 500);\n//   res.json('error', {\n//     message: err.message,\n//     error: {}\n//   });\n// });\n\napp.listen(app.get('port'), () => {\n  console.log('Node app is running on port', app.get('port'));\n});\n\n\nmodule.exports = app;\n"]}